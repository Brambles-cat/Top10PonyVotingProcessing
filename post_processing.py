import sys
import csv
from pathlib import Path
from functions.post_processing import (
    fetch_videos_data,
    generate_archive_records,
    generate_sharable_records,
    generate_archive_csv,
    generate_sharable_csv,
    generate_showcase_description,
)
from functions.messages import suc, inf, err

if len(sys.argv) < 3:
    print("python {sys.argv[0]} VIDEO_URLS_LIST OUTPUT_FILE_NAME")
    print(
        """
Given a text file containing a list of video URLs, output 3 files:

* [name]-archive.csv: A CSV file containing the video data presented in
  the format used by Flynn's master archive list.
* [name]-sharable.csv: A CSV file containing the video data presented in
  the format used by the sharable spreadsheet attached to each showcase video.
* [name]-description.text: A text file containing an autogenerated
  description template for the showcase video.
"""
    )
    sys.exit()

video_urls_list_path_str = sys.argv[1]
output_file_name = sys.argv[2]
video_urls_list_path = Path(video_urls_list_path_str)

# Read CSV and extract URLs from the fourth column, skipping the first row
video_urls = []
with open(video_urls_list_path, "r", newline="", encoding="utf8") as csvfile:
    reader = csv.reader(csvfile)
    next(reader)  # Skip the header row
    for row in reader:
        if (
            len(row) >= 4 and row[3]
        ):  # Check if the row has at least 4 columns and the fourth column is not empty
            video_urls.append(row[3])

videos_data = fetch_videos_data(video_urls)

archive_file_name = f"{output_file_name}-archive.csv"
sharable_file_name = f"{output_file_name}-sharable.csv"
desc_file_name = f"{output_file_name}-description.csv"

archive_records = generate_archive_records(video_urls, videos_data)
generate_archive_csv(archive_records, archive_file_name)
suc(f"Wrote archive data to {archive_file_name}.")

sharable_records = generate_sharable_records(video_urls, videos_data)
generate_sharable_csv(sharable_records, sharable_file_name)
suc(f"Wrote sharable spreadsheet data to {sharable_file_name}.")

showcase_desc = generate_showcase_description(video_urls, videos_data, silent=False)
with open(f"{output_file_name}-description.txt", "w", encoding="utf8") as file:
    file.write(showcase_desc)
suc(f"Wrote showcase description to {desc_file_name}.")
suc("Finished.")
